"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qs-esm";
exports.ids = ["vendor-chunks/qs-esm"];
exports.modules = {

/***/ "(ssr)/./node_modules/qs-esm/lib/formats.js":
/*!********************************************!*\
  !*** ./node_modules/qs-esm/lib/formats.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RFC1738: () => (/* binding */ RFC1738),\n/* harmony export */   RFC3986: () => (/* binding */ RFC3986),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatters: () => (/* binding */ formatters)\n/* harmony export */ });\n\n\nconst replace = String.prototype.replace\nconst percentTwenties = /%20/g\n\nconst Format = {\n  RFC1738: 'RFC1738',\n  RFC3986: 'RFC3986',\n}\n\nconst formatters = {\n  RFC1738: function (value) {\n    return replace.call(value, percentTwenties, '+')\n  },\n  RFC3986: function (value) {\n    return String(value)\n  },\n}\nconst RFC1738 = Format.RFC1738\nconst RFC3986 = Format.RFC3986\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Format.RFC3986);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXMtZXNtL2xpYi9mb3JtYXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBWTs7QUFFWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ087QUFDQTs7QUFFUCxpRUFBZSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcjFfMS9EZXNrdG9wL3dvcmtzcGFjZS9uZXdhcHAvbmV4dGpzLWJsb2cvbm9kZV9tb2R1bGVzL3FzLWVzbS9saWIvZm9ybWF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuY29uc3QgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nXG5cbmNvbnN0IEZvcm1hdCA9IHtcbiAgUkZDMTczODogJ1JGQzE3MzgnLFxuICBSRkMzOTg2OiAnUkZDMzk4NicsXG59XG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJylcbiAgfSxcbiAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSlcbiAgfSxcbn1cbmV4cG9ydCBjb25zdCBSRkMxNzM4ID0gRm9ybWF0LlJGQzE3MzhcbmV4cG9ydCBjb25zdCBSRkMzOTg2ID0gRm9ybWF0LlJGQzM5ODZcblxuZXhwb3J0IGRlZmF1bHQgRm9ybWF0LlJGQzM5ODZcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qs-esm/lib/formats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qs-esm/lib/parse.js":
/*!******************************************!*\
  !*** ./node_modules/qs-esm/lib/parse.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/qs-esm/lib/utils.js\");\n\n\n;\n\nconst has = Object.prototype.hasOwnProperty\nconst isArray = Array.isArray\n\nconst defaults = {\n  allowDots: false,\n  allowEmptyArrays: false,\n  allowPrototypes: false,\n  allowSparse: false,\n  arrayLimit: 20,\n  charset: 'utf-8',\n  charsetSentinel: false,\n  comma: false,\n  decodeDotInKeys: false,\n  decoder: _utils_js__WEBPACK_IMPORTED_MODULE_0__.decode,\n  delimiter: '&',\n  depth: 5,\n  duplicates: 'combine',\n  ignoreQueryPrefix: false,\n  interpretNumericEntities: false,\n  parameterLimit: 1000,\n  parseArrays: true,\n  plainObjects: false,\n  strictNullHandling: false,\n}\n\nconst interpretNumericEntities = function (str) {\n  return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n    return String.fromCharCode(parseInt(numberStr, 10))\n  })\n}\n\nconst parseArrayValue = function (val, options) {\n  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n    return val.split(',')\n  }\n\n  return val\n}\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nconst isoSentinel = 'utf8=%26%2310003%3B' // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nconst charsetSentinel = 'utf8=%E2%9C%93' // encodeURIComponent('✓')\n\nconst parseValues = function parseQueryStringValues(str, options) {\n  const obj = { __proto__: null }\n\n  const cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str\n  const limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit\n  const parts = cleanStr.split(options.delimiter, limit)\n  let skipIndex = -1 // Keep track of where the utf8 sentinel was found\n  let i\n\n  let charset = options.charset\n  if (options.charsetSentinel) {\n    for (i = 0; i < parts.length; ++i) {\n      if (parts[i].indexOf('utf8=') === 0) {\n        if (parts[i] === charsetSentinel) {\n          charset = 'utf-8'\n        } else if (parts[i] === isoSentinel) {\n          charset = 'iso-8859-1'\n        }\n        skipIndex = i\n        i = parts.length // The eslint settings do not allow break;\n      }\n    }\n  }\n\n  for (i = 0; i < parts.length; ++i) {\n    if (i === skipIndex) {\n      continue\n    }\n    const part = parts[i]\n\n    const bracketEqualsPos = part.indexOf(']=')\n    const pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1\n\n    let key, val\n    if (pos === -1) {\n      key = options.decoder(part, defaults.decoder, charset, 'key')\n      val = options.strictNullHandling ? null : ''\n    } else {\n      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key')\n      val = _utils_js__WEBPACK_IMPORTED_MODULE_0__.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {\n        return options.decoder(encodedVal, defaults.decoder, charset, 'value')\n      })\n    }\n\n    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n      val = interpretNumericEntities(val)\n    }\n\n    if (part.indexOf('[]=') > -1) {\n      val = isArray(val) ? [val] : val\n    }\n\n    const existing = has.call(obj, key)\n    if (existing && options.duplicates === 'combine') {\n      obj[key] = _utils_js__WEBPACK_IMPORTED_MODULE_0__.combine(obj[key], val)\n    } else if (!existing || options.duplicates === 'last') {\n      obj[key] = val\n    }\n  }\n\n  return obj\n}\n\nconst parseObject = function (chain, val, options, valuesParsed) {\n  let leaf = valuesParsed ? val : parseArrayValue(val, options)\n\n  for (let i = chain.length - 1; i >= 0; --i) {\n    let obj\n    const root = chain[i]\n\n    if (root === '[]' && options.parseArrays) {\n      obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf)\n    } else {\n      obj = options.plainObjects ? Object.create(null) : {}\n      const cleanRoot =\n        root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root\n      const decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot\n      const index = parseInt(decodedRoot, 10)\n      if (!options.parseArrays && decodedRoot === '') {\n        obj = { 0: leaf }\n      } else if (\n        !isNaN(index) &&\n        root !== decodedRoot &&\n        String(index) === decodedRoot &&\n        index >= 0 &&\n        options.parseArrays &&\n        index <= options.arrayLimit\n      ) {\n        obj = []\n        obj[index] = leaf\n      } else if (decodedRoot !== '__proto__') {\n        obj[decodedRoot] = leaf\n      }\n    }\n\n    leaf = obj\n  }\n\n  return leaf\n}\n\nconst parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n  if (!givenKey) {\n    return\n  }\n\n  // Transform dot notation to bracket notation\n  const key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey\n\n  // The regex chunks\n\n  const brackets = /(\\[[^[\\]]*])/\n  const child = /(\\[[^[\\]]*])/g\n\n  // Get the parent\n\n  let segment = options.depth > 0 && brackets.exec(key)\n  const parent = segment ? key.slice(0, segment.index) : key\n\n  // Stash the parent if it exists\n\n  const keys = []\n  if (parent) {\n    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n    if (!options.plainObjects && has.call(Object.prototype, parent)) {\n      if (!options.allowPrototypes) {\n        return\n      }\n    }\n\n    keys.push(parent)\n  }\n\n  // Loop through children appending to the array until we hit depth\n\n  let i = 0\n  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n    i += 1\n    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n      if (!options.allowPrototypes) {\n        return\n      }\n    }\n    keys.push(segment[1])\n  }\n\n  // If there's a remainder, just add whatever is left\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']')\n  }\n\n  return parseObject(keys, val, options, valuesParsed)\n}\n\nconst normalizeParseOptions = function normalizeParseOptions(opts) {\n  if (!opts) {\n    return defaults\n  }\n\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided')\n  }\n\n  if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n    throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided')\n  }\n\n  if (\n    opts.decoder !== null &&\n    typeof opts.decoder !== 'undefined' &&\n    typeof opts.decoder !== 'function'\n  ) {\n    throw new TypeError('Decoder has to be a function.')\n  }\n\n  if (\n    typeof opts.charset !== 'undefined' &&\n    opts.charset !== 'utf-8' &&\n    opts.charset !== 'iso-8859-1'\n  ) {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined')\n  }\n  const charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset\n\n  const duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates\n\n  if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n    throw new TypeError('The duplicates option must be either combine, first, or last')\n  }\n\n  const allowDots =\n    typeof opts.allowDots === 'undefined'\n      ? opts.decodeDotInKeys === true\n        ? true\n        : defaults.allowDots\n      : !!opts.allowDots\n\n  return {\n    allowDots: allowDots,\n    allowEmptyArrays:\n      typeof opts.allowEmptyArrays === 'boolean'\n        ? !!opts.allowEmptyArrays\n        : defaults.allowEmptyArrays,\n    allowPrototypes:\n      typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n    charset: charset,\n    charsetSentinel:\n      typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n    decodeDotInKeys:\n      typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n    delimiter:\n      typeof opts.delimiter === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp(opts.delimiter)\n        ? opts.delimiter\n        : defaults.delimiter,\n    // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n    duplicates: duplicates,\n    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n    interpretNumericEntities:\n      typeof opts.interpretNumericEntities === 'boolean'\n        ? opts.interpretNumericEntities\n        : defaults.interpretNumericEntities,\n    parameterLimit:\n      typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n    parseArrays: opts.parseArrays !== false,\n    plainObjects:\n      typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n    strictNullHandling:\n      typeof opts.strictNullHandling === 'boolean'\n        ? opts.strictNullHandling\n        : defaults.strictNullHandling,\n  }\n}\n\nfunction parse(str, opts) {\n  const options = normalizeParseOptions(opts)\n\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return options.plainObjects ? Object.create(null) : {}\n  }\n\n  const tempObj = typeof str === 'string' ? parseValues(str, options) : str\n  let obj = options.plainObjects ? Object.create(null) : {}\n\n  // Iterate over the keys and setup the new object\n\n  const keys = Object.keys(tempObj)\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i]\n    const newObj = parseKeys(key, tempObj[key], options, typeof str === 'string')\n    obj = _utils_js__WEBPACK_IMPORTED_MODULE_0__.merge(obj, newObj, options)\n  }\n\n  if (options.allowSparse === true) {\n    return obj\n  }\n\n  return _utils_js__WEBPACK_IMPORTED_MODULE_0__.compact(obj)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qs-esm/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qs-esm/lib/stringify.js":
/*!**********************************************!*\
  !*** ./node_modules/qs-esm/lib/stringify.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/qs-esm/lib/utils.js\");\n/* harmony import */ var _formats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.js */ \"(ssr)/./node_modules/qs-esm/lib/formats.js\");\n\n\n;\n\n\nconst has = Object.prototype.hasOwnProperty\n\nconst arrayPrefixGenerators = {\n  brackets: function brackets(prefix) {\n    return prefix + '[]'\n  },\n  comma: 'comma',\n  indices: function indices(prefix, key) {\n    return prefix + '[' + key + ']'\n  },\n  repeat: function repeat(prefix) {\n    return prefix\n  },\n}\n\nconst isArray = Array.isArray\nconst push = Array.prototype.push\nconst pushToArray = function (arr, valueOrArray) {\n  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray])\n}\n\nconst toISO = Date.prototype.toISOString\n\nconst defaultFormat = _formats_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\nconst defaults = {\n  addQueryPrefix: false,\n  allowDots: false,\n  allowEmptyArrays: false,\n  arrayFormat: 'indices',\n  charset: 'utf-8',\n  charsetSentinel: false,\n  delimiter: '&',\n  encode: true,\n  encodeDotInKeys: false,\n  encoder: _utils_js__WEBPACK_IMPORTED_MODULE_1__.encode,\n  encodeValuesOnly: false,\n  format: defaultFormat,\n  formatter: _formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters[defaultFormat],\n  // deprecated\n  indices: false,\n  serializeDate: function serializeDate(date) {\n    return toISO.call(date)\n  },\n  skipNulls: false,\n  strictNullHandling: false,\n}\n\nconst isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n  return (\n    typeof v === 'string' ||\n    typeof v === 'number' ||\n    typeof v === 'boolean' ||\n    typeof v === 'symbol' ||\n    typeof v === 'bigint'\n  )\n}\n\nconst sentinel = {}\n\nconst _stringify = function stringify(\n  object,\n  prefix,\n  generateArrayPrefix,\n  commaRoundTrip,\n  allowEmptyArrays,\n  strictNullHandling,\n  skipNulls,\n  encodeDotInKeys,\n  encoder,\n  filter,\n  sort,\n  allowDots,\n  serializeDate,\n  format,\n  formatter,\n  encodeValuesOnly,\n  charset,\n  sideChannel,\n) {\n  let obj = object\n\n  let tmpSc = sideChannel\n  let step = 0\n  let findFlag = false\n  while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n    // Where object last appeared in the ref tree\n    const pos = tmpSc.get(object)\n    step += 1\n    if (typeof pos !== 'undefined') {\n      if (pos === step) {\n        throw new RangeError('Cyclic object value')\n      } else {\n        findFlag = true // Break while\n      }\n    }\n    if (typeof tmpSc.get(sentinel) === 'undefined') {\n      step = 0\n    }\n  }\n\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj)\n  } else if (obj instanceof Date) {\n    obj = serializeDate(obj)\n  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    obj = _utils_js__WEBPACK_IMPORTED_MODULE_1__.maybeMap(obj, function (value) {\n      if (value instanceof Date) {\n        return serializeDate(value)\n      }\n      return value\n    })\n  }\n\n  if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly\n        ? encoder(prefix, defaults.encoder, charset, 'key', format)\n        : prefix\n    }\n\n    obj = ''\n  }\n\n  if (isNonNullishPrimitive(obj) || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBuffer(obj)) {\n    if (encoder) {\n      const keyValue = encodeValuesOnly\n        ? prefix\n        : encoder(prefix, defaults.encoder, charset, 'key', format)\n      return [\n        formatter(keyValue) +\n          '=' +\n          formatter(encoder(obj, defaults.encoder, charset, 'value', format)),\n      ]\n    }\n    return [formatter(prefix) + '=' + formatter(String(obj))]\n  }\n\n  const values = []\n\n  if (typeof obj === 'undefined') {\n    return values\n  }\n\n  let objKeys\n  if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    // we need to join elements in\n    if (encodeValuesOnly && encoder) {\n      obj = _utils_js__WEBPACK_IMPORTED_MODULE_1__.maybeMap(obj, encoder)\n    }\n    objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }]\n  } else if (isArray(filter)) {\n    objKeys = filter\n  } else {\n    const keys = Object.keys(obj)\n    objKeys = sort ? keys.sort(sort) : keys\n  }\n\n  const encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix\n\n  const adjustedPrefix =\n    commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix\n\n  if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n    return adjustedPrefix + '[]'\n  }\n\n  for (let j = 0; j < objKeys.length; ++j) {\n    const key = objKeys[j]\n    const value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key]\n\n    if (skipNulls && value === null) {\n      continue\n    }\n\n    const encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key\n    const keyPrefix = isArray(obj)\n      ? typeof generateArrayPrefix === 'function'\n        ? generateArrayPrefix(adjustedPrefix, encodedKey)\n        : adjustedPrefix\n      : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']')\n\n    sideChannel.set(object, step)\n    const valueSideChannel = new WeakMap()\n    valueSideChannel.set(sentinel, sideChannel)\n    pushToArray(\n      values,\n      _stringify(\n        value,\n        keyPrefix,\n        generateArrayPrefix,\n        commaRoundTrip,\n        allowEmptyArrays,\n        strictNullHandling,\n        skipNulls,\n        encodeDotInKeys,\n        generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n        filter,\n        sort,\n        allowDots,\n        serializeDate,\n        format,\n        formatter,\n        encodeValuesOnly,\n        charset,\n        valueSideChannel,\n      ),\n    )\n  }\n\n  return values\n}\n\nconst normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n  if (!opts) {\n    return defaults\n  }\n\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided')\n  }\n\n  if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n    throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided')\n  }\n\n  if (\n    opts.encoder !== null &&\n    typeof opts.encoder !== 'undefined' &&\n    typeof opts.encoder !== 'function'\n  ) {\n    throw new TypeError('Encoder has to be a function.')\n  }\n\n  const charset = opts.charset || defaults.charset\n  if (\n    typeof opts.charset !== 'undefined' &&\n    opts.charset !== 'utf-8' &&\n    opts.charset !== 'iso-8859-1'\n  ) {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined')\n  }\n\n  let format = _formats_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  if (typeof opts.format !== 'undefined') {\n    if (!has.call(_formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters, opts.format)) {\n      throw new TypeError('Unknown format option provided.')\n    }\n    format = opts.format\n  }\n  const formatter = _formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters[format]\n\n  let filter = defaults.filter\n  if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n    filter = opts.filter\n  }\n\n  let arrayFormat\n  if (opts.arrayFormat in arrayPrefixGenerators) {\n    arrayFormat = opts.arrayFormat\n  } else if ('indices' in opts) {\n    arrayFormat = opts.indices ? 'indices' : 'repeat'\n  } else {\n    arrayFormat = defaults.arrayFormat\n  }\n\n  if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n    throw new TypeError('`commaRoundTrip` must be a boolean, or absent')\n  }\n\n  const allowDots =\n    typeof opts.allowDots === 'undefined'\n      ? opts.encodeDotInKeys === true\n        ? true\n        : defaults.allowDots\n      : !!opts.allowDots\n\n  return {\n    addQueryPrefix:\n      typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n    allowDots: allowDots,\n    allowEmptyArrays:\n      typeof opts.allowEmptyArrays === 'boolean'\n        ? !!opts.allowEmptyArrays\n        : defaults.allowEmptyArrays,\n    arrayFormat: arrayFormat,\n    charset: charset,\n    charsetSentinel:\n      typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    commaRoundTrip: opts.commaRoundTrip,\n    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n    encodeDotInKeys:\n      typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n    encodeValuesOnly:\n      typeof opts.encodeValuesOnly === 'boolean'\n        ? opts.encodeValuesOnly\n        : defaults.encodeValuesOnly,\n    filter: filter,\n    format: format,\n    formatter: formatter,\n    serializeDate:\n      typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n    sort: typeof opts.sort === 'function' ? opts.sort : null,\n    strictNullHandling:\n      typeof opts.strictNullHandling === 'boolean'\n        ? opts.strictNullHandling\n        : defaults.strictNullHandling,\n  }\n}\n\nfunction stringify(object, opts) {\n  let obj = object\n  const options = normalizeStringifyOptions(opts)\n\n  let objKeys\n  let filter\n\n  if (typeof options.filter === 'function') {\n    filter = options.filter\n    obj = filter('', obj)\n  } else if (isArray(options.filter)) {\n    filter = options.filter\n    objKeys = filter\n  }\n\n  const keys = []\n\n  if (typeof obj !== 'object' || obj === null) {\n    return ''\n  }\n\n  const generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat]\n  const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip\n\n  if (!objKeys) {\n    objKeys = Object.keys(obj)\n  }\n\n  if (options.sort) {\n    objKeys.sort(options.sort)\n  }\n\n  const sideChannel = new WeakMap()\n  for (let i = 0; i < objKeys.length; ++i) {\n    const key = objKeys[i]\n\n    if (options.skipNulls && obj[key] === null) {\n      continue\n    }\n    pushToArray(\n      keys,\n      _stringify(\n        obj[key],\n        key,\n        generateArrayPrefix,\n        commaRoundTrip,\n        options.allowEmptyArrays,\n        options.strictNullHandling,\n        options.skipNulls,\n        options.encodeDotInKeys,\n        options.encode ? options.encoder : null,\n        options.filter,\n        options.sort,\n        options.allowDots,\n        options.serializeDate,\n        options.format,\n        options.formatter,\n        options.encodeValuesOnly,\n        options.charset,\n        sideChannel,\n      ),\n    )\n  }\n\n  const joined = keys.join(options.delimiter)\n  let prefix = options.addQueryPrefix === true ? '?' : ''\n\n  if (options.charsetSentinel) {\n    if (options.charset === 'iso-8859-1') {\n      // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n      prefix += 'utf8=%26%2310003%3B&'\n    } else {\n      // encodeURIComponent('✓')\n      prefix += 'utf8=%E2%9C%93&'\n    }\n  }\n\n  return joined.length > 0 ? prefix + joined : ''\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qs-esm/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qs-esm/lib/utils.js":
/*!******************************************!*\
  !*** ./node_modules/qs-esm/lib/utils.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToObject: () => (/* binding */ arrayToObject),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   maybeMap: () => (/* binding */ maybeMap),\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _formats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.js */ \"(ssr)/./node_modules/qs-esm/lib/formats.js\");\n\n\n;\n\nconst has = Object.prototype.hasOwnProperty\nconst isArray = Array.isArray\n\nconst hexTable = (function () {\n  const array = []\n  for (let i = 0; i < 256; ++i) {\n    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase())\n  }\n\n  return array\n})()\n\nconst compactQueue = function compactQueue(queue) {\n  while (queue.length > 1) {\n    const item = queue.pop()\n    const obj = item.obj[item.prop]\n\n    if (isArray(obj)) {\n      const compacted = []\n\n      for (let j = 0; j < obj.length; ++j) {\n        if (typeof obj[j] !== 'undefined') {\n          compacted.push(obj[j])\n        }\n      }\n\n      item.obj[item.prop] = compacted\n    }\n  }\n}\n\nconst arrayToObject = function arrayToObject(source, options) {\n  const obj = options && options.plainObjects ? Object.create(null) : {}\n  for (let i = 0; i < source.length; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i]\n    }\n  }\n\n  return obj\n}\n\nconst merge = function merge(target, source, options) {\n  /* eslint no-param-reassign: 0 */\n  if (!source) {\n    return target\n  }\n\n  if (typeof source !== 'object') {\n    if (isArray(target)) {\n      target.push(source)\n    } else if (target && typeof target === 'object') {\n      if (\n        (options && (options.plainObjects || options.allowPrototypes)) ||\n        !has.call(Object.prototype, source)\n      ) {\n        target[source] = true\n      }\n    } else {\n      return [target, source]\n    }\n\n    return target\n  }\n\n  if (!target || typeof target !== 'object') {\n    return [target].concat(source)\n  }\n\n  let mergeTarget = target\n  if (isArray(target) && !isArray(source)) {\n    mergeTarget = arrayToObject(target, options)\n  }\n\n  if (isArray(target) && isArray(source)) {\n    source.forEach(function (item, i) {\n      if (has.call(target, i)) {\n        const targetItem = target[i]\n        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n          target[i] = merge(targetItem, item, options)\n        } else {\n          target.push(item)\n        }\n      } else {\n        target[i] = item\n      }\n    })\n    return target\n  }\n\n  return Object.keys(source).reduce(function (acc, key) {\n    const value = source[key]\n\n    if (has.call(acc, key)) {\n      acc[key] = merge(acc[key], value, options)\n    } else {\n      acc[key] = value\n    }\n    return acc\n  }, mergeTarget)\n}\n\nconst assign = function assignSingleSource(target, source) {\n  return Object.keys(source).reduce(function (acc, key) {\n    acc[key] = source[key]\n    return acc\n  }, target)\n}\n\nconst decode = function (str, decoder, charset) {\n  const strWithoutPlus = str.replace(/\\+/g, ' ')\n  if (charset === 'iso-8859-1') {\n    // unescape never throws, no try...catch needed:\n    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape)\n  }\n  // utf-8\n  try {\n    return decodeURIComponent(strWithoutPlus)\n  } catch (e) {\n    return strWithoutPlus\n  }\n}\n\nconst limit = 1024\n\nconst encode = function encode(str, defaultEncoder, charset, kind, format) {\n  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n  // It has been adapted here for stricter adherence to RFC 3986\n  if (str.length === 0) {\n    return str\n  }\n\n  let string = str\n  if (typeof str === 'symbol') {\n    string = Symbol.prototype.toString.call(str)\n  } else if (typeof str !== 'string') {\n    string = String(str)\n  }\n\n  if (charset === 'iso-8859-1') {\n    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n      return '%26%23' + parseInt($0.slice(2), 16) + '%3B'\n    })\n  }\n\n  let out = ''\n  for (let j = 0; j < string.length; j += limit) {\n    const segment = string.length >= limit ? string.slice(j, j + limit) : string\n    const arr = []\n\n    for (let i = 0; i < segment.length; ++i) {\n      let c = segment.charCodeAt(i)\n      if (\n        c === 0x2d || // -\n        c === 0x2e || // .\n        c === 0x5f || // _\n        c === 0x7e || // ~\n        (c >= 0x30 && c <= 0x39) || // 0-9\n        (c >= 0x41 && c <= 0x5a) || // a-z\n        (c >= 0x61 && c <= 0x7a) || // A-Z\n        (format === _formats_js__WEBPACK_IMPORTED_MODULE_0__.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n      ) {\n        arr[arr.length] = segment.charAt(i)\n        continue\n      }\n\n      if (c < 0x80) {\n        arr[arr.length] = hexTable[c]\n        continue\n      }\n\n      if (c < 0x800) {\n        arr[arr.length] = hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)]\n        continue\n      }\n\n      if (c < 0xd800 || c >= 0xe000) {\n        arr[arr.length] =\n          hexTable[0xe0 | (c >> 12)] +\n          hexTable[0x80 | ((c >> 6) & 0x3f)] +\n          hexTable[0x80 | (c & 0x3f)]\n        continue\n      }\n\n      i += 1\n      c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff))\n\n      arr[arr.length] =\n        hexTable[0xf0 | (c >> 18)] +\n        hexTable[0x80 | ((c >> 12) & 0x3f)] +\n        hexTable[0x80 | ((c >> 6) & 0x3f)] +\n        hexTable[0x80 | (c & 0x3f)]\n    }\n\n    out += arr.join('')\n  }\n\n  return out\n}\n\nconst compact = function compact(value) {\n  const queue = [{ obj: { o: value }, prop: 'o' }]\n  const refs = []\n\n  for (let i = 0; i < queue.length; ++i) {\n    const item = queue[i]\n    const obj = item.obj[item.prop]\n\n    const keys = Object.keys(obj)\n    for (let j = 0; j < keys.length; ++j) {\n      const key = keys[j]\n      const val = obj[key]\n      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n        queue.push({ obj: obj, prop: key })\n        refs.push(val)\n      }\n    }\n  }\n\n  compactQueue(queue)\n\n  return value\n}\n\nconst isRegExp = function isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]'\n}\n\nconst isBuffer = function isBuffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false\n  }\n\n  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj))\n}\n\nconst combine = function combine(a, b) {\n  return [].concat(a, b)\n}\n\nconst maybeMap = function maybeMap(val, fn) {\n  if (isArray(val)) {\n    const mapped = []\n    for (let i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]))\n    }\n    return mapped\n  }\n  return fn(val)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qs-esm/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs-esm/lib/formats.js":
/*!********************************************!*\
  !*** ./node_modules/qs-esm/lib/formats.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RFC1738: () => (/* binding */ RFC1738),\n/* harmony export */   RFC3986: () => (/* binding */ RFC3986),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatters: () => (/* binding */ formatters)\n/* harmony export */ });\n\n\nconst replace = String.prototype.replace\nconst percentTwenties = /%20/g\n\nconst Format = {\n  RFC1738: 'RFC1738',\n  RFC3986: 'RFC3986',\n}\n\nconst formatters = {\n  RFC1738: function (value) {\n    return replace.call(value, percentTwenties, '+')\n  },\n  RFC3986: function (value) {\n    return String(value)\n  },\n}\nconst RFC1738 = Format.RFC1738\nconst RFC3986 = Format.RFC3986\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Format.RFC3986);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcXMtZXNtL2xpYi9mb3JtYXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBWTs7QUFFWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ087QUFDQTs7QUFFUCxpRUFBZSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcjFfMS9EZXNrdG9wL3dvcmtzcGFjZS9uZXdhcHAvbmV4dGpzLWJsb2cvbm9kZV9tb2R1bGVzL3FzLWVzbS9saWIvZm9ybWF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuY29uc3QgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nXG5cbmNvbnN0IEZvcm1hdCA9IHtcbiAgUkZDMTczODogJ1JGQzE3MzgnLFxuICBSRkMzOTg2OiAnUkZDMzk4NicsXG59XG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJylcbiAgfSxcbiAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSlcbiAgfSxcbn1cbmV4cG9ydCBjb25zdCBSRkMxNzM4ID0gRm9ybWF0LlJGQzE3MzhcbmV4cG9ydCBjb25zdCBSRkMzOTg2ID0gRm9ybWF0LlJGQzM5ODZcblxuZXhwb3J0IGRlZmF1bHQgRm9ybWF0LlJGQzM5ODZcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs-esm/lib/formats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs-esm/lib/parse.js":
/*!******************************************!*\
  !*** ./node_modules/qs-esm/lib/parse.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/qs-esm/lib/utils.js\");\n\n\n;\n\nconst has = Object.prototype.hasOwnProperty\nconst isArray = Array.isArray\n\nconst defaults = {\n  allowDots: false,\n  allowEmptyArrays: false,\n  allowPrototypes: false,\n  allowSparse: false,\n  arrayLimit: 20,\n  charset: 'utf-8',\n  charsetSentinel: false,\n  comma: false,\n  decodeDotInKeys: false,\n  decoder: _utils_js__WEBPACK_IMPORTED_MODULE_0__.decode,\n  delimiter: '&',\n  depth: 5,\n  duplicates: 'combine',\n  ignoreQueryPrefix: false,\n  interpretNumericEntities: false,\n  parameterLimit: 1000,\n  parseArrays: true,\n  plainObjects: false,\n  strictNullHandling: false,\n}\n\nconst interpretNumericEntities = function (str) {\n  return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n    return String.fromCharCode(parseInt(numberStr, 10))\n  })\n}\n\nconst parseArrayValue = function (val, options) {\n  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n    return val.split(',')\n  }\n\n  return val\n}\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nconst isoSentinel = 'utf8=%26%2310003%3B' // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nconst charsetSentinel = 'utf8=%E2%9C%93' // encodeURIComponent('✓')\n\nconst parseValues = function parseQueryStringValues(str, options) {\n  const obj = { __proto__: null }\n\n  const cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str\n  const limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit\n  const parts = cleanStr.split(options.delimiter, limit)\n  let skipIndex = -1 // Keep track of where the utf8 sentinel was found\n  let i\n\n  let charset = options.charset\n  if (options.charsetSentinel) {\n    for (i = 0; i < parts.length; ++i) {\n      if (parts[i].indexOf('utf8=') === 0) {\n        if (parts[i] === charsetSentinel) {\n          charset = 'utf-8'\n        } else if (parts[i] === isoSentinel) {\n          charset = 'iso-8859-1'\n        }\n        skipIndex = i\n        i = parts.length // The eslint settings do not allow break;\n      }\n    }\n  }\n\n  for (i = 0; i < parts.length; ++i) {\n    if (i === skipIndex) {\n      continue\n    }\n    const part = parts[i]\n\n    const bracketEqualsPos = part.indexOf(']=')\n    const pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1\n\n    let key, val\n    if (pos === -1) {\n      key = options.decoder(part, defaults.decoder, charset, 'key')\n      val = options.strictNullHandling ? null : ''\n    } else {\n      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key')\n      val = _utils_js__WEBPACK_IMPORTED_MODULE_0__.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {\n        return options.decoder(encodedVal, defaults.decoder, charset, 'value')\n      })\n    }\n\n    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n      val = interpretNumericEntities(val)\n    }\n\n    if (part.indexOf('[]=') > -1) {\n      val = isArray(val) ? [val] : val\n    }\n\n    const existing = has.call(obj, key)\n    if (existing && options.duplicates === 'combine') {\n      obj[key] = _utils_js__WEBPACK_IMPORTED_MODULE_0__.combine(obj[key], val)\n    } else if (!existing || options.duplicates === 'last') {\n      obj[key] = val\n    }\n  }\n\n  return obj\n}\n\nconst parseObject = function (chain, val, options, valuesParsed) {\n  let leaf = valuesParsed ? val : parseArrayValue(val, options)\n\n  for (let i = chain.length - 1; i >= 0; --i) {\n    let obj\n    const root = chain[i]\n\n    if (root === '[]' && options.parseArrays) {\n      obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf)\n    } else {\n      obj = options.plainObjects ? Object.create(null) : {}\n      const cleanRoot =\n        root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root\n      const decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot\n      const index = parseInt(decodedRoot, 10)\n      if (!options.parseArrays && decodedRoot === '') {\n        obj = { 0: leaf }\n      } else if (\n        !isNaN(index) &&\n        root !== decodedRoot &&\n        String(index) === decodedRoot &&\n        index >= 0 &&\n        options.parseArrays &&\n        index <= options.arrayLimit\n      ) {\n        obj = []\n        obj[index] = leaf\n      } else if (decodedRoot !== '__proto__') {\n        obj[decodedRoot] = leaf\n      }\n    }\n\n    leaf = obj\n  }\n\n  return leaf\n}\n\nconst parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n  if (!givenKey) {\n    return\n  }\n\n  // Transform dot notation to bracket notation\n  const key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey\n\n  // The regex chunks\n\n  const brackets = /(\\[[^[\\]]*])/\n  const child = /(\\[[^[\\]]*])/g\n\n  // Get the parent\n\n  let segment = options.depth > 0 && brackets.exec(key)\n  const parent = segment ? key.slice(0, segment.index) : key\n\n  // Stash the parent if it exists\n\n  const keys = []\n  if (parent) {\n    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n    if (!options.plainObjects && has.call(Object.prototype, parent)) {\n      if (!options.allowPrototypes) {\n        return\n      }\n    }\n\n    keys.push(parent)\n  }\n\n  // Loop through children appending to the array until we hit depth\n\n  let i = 0\n  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n    i += 1\n    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n      if (!options.allowPrototypes) {\n        return\n      }\n    }\n    keys.push(segment[1])\n  }\n\n  // If there's a remainder, just add whatever is left\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']')\n  }\n\n  return parseObject(keys, val, options, valuesParsed)\n}\n\nconst normalizeParseOptions = function normalizeParseOptions(opts) {\n  if (!opts) {\n    return defaults\n  }\n\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided')\n  }\n\n  if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n    throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided')\n  }\n\n  if (\n    opts.decoder !== null &&\n    typeof opts.decoder !== 'undefined' &&\n    typeof opts.decoder !== 'function'\n  ) {\n    throw new TypeError('Decoder has to be a function.')\n  }\n\n  if (\n    typeof opts.charset !== 'undefined' &&\n    opts.charset !== 'utf-8' &&\n    opts.charset !== 'iso-8859-1'\n  ) {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined')\n  }\n  const charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset\n\n  const duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates\n\n  if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n    throw new TypeError('The duplicates option must be either combine, first, or last')\n  }\n\n  const allowDots =\n    typeof opts.allowDots === 'undefined'\n      ? opts.decodeDotInKeys === true\n        ? true\n        : defaults.allowDots\n      : !!opts.allowDots\n\n  return {\n    allowDots: allowDots,\n    allowEmptyArrays:\n      typeof opts.allowEmptyArrays === 'boolean'\n        ? !!opts.allowEmptyArrays\n        : defaults.allowEmptyArrays,\n    allowPrototypes:\n      typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n    charset: charset,\n    charsetSentinel:\n      typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n    decodeDotInKeys:\n      typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n    delimiter:\n      typeof opts.delimiter === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp(opts.delimiter)\n        ? opts.delimiter\n        : defaults.delimiter,\n    // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n    duplicates: duplicates,\n    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n    interpretNumericEntities:\n      typeof opts.interpretNumericEntities === 'boolean'\n        ? opts.interpretNumericEntities\n        : defaults.interpretNumericEntities,\n    parameterLimit:\n      typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n    parseArrays: opts.parseArrays !== false,\n    plainObjects:\n      typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n    strictNullHandling:\n      typeof opts.strictNullHandling === 'boolean'\n        ? opts.strictNullHandling\n        : defaults.strictNullHandling,\n  }\n}\n\nfunction parse(str, opts) {\n  const options = normalizeParseOptions(opts)\n\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return options.plainObjects ? Object.create(null) : {}\n  }\n\n  const tempObj = typeof str === 'string' ? parseValues(str, options) : str\n  let obj = options.plainObjects ? Object.create(null) : {}\n\n  // Iterate over the keys and setup the new object\n\n  const keys = Object.keys(tempObj)\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i]\n    const newObj = parseKeys(key, tempObj[key], options, typeof str === 'string')\n    obj = _utils_js__WEBPACK_IMPORTED_MODULE_0__.merge(obj, newObj, options)\n  }\n\n  if (options.allowSparse === true) {\n    return obj\n  }\n\n  return _utils_js__WEBPACK_IMPORTED_MODULE_0__.compact(obj)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs-esm/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs-esm/lib/stringify.js":
/*!**********************************************!*\
  !*** ./node_modules/qs-esm/lib/stringify.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/qs-esm/lib/utils.js\");\n/* harmony import */ var _formats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.js */ \"(rsc)/./node_modules/qs-esm/lib/formats.js\");\n\n\n;\n\n\nconst has = Object.prototype.hasOwnProperty\n\nconst arrayPrefixGenerators = {\n  brackets: function brackets(prefix) {\n    return prefix + '[]'\n  },\n  comma: 'comma',\n  indices: function indices(prefix, key) {\n    return prefix + '[' + key + ']'\n  },\n  repeat: function repeat(prefix) {\n    return prefix\n  },\n}\n\nconst isArray = Array.isArray\nconst push = Array.prototype.push\nconst pushToArray = function (arr, valueOrArray) {\n  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray])\n}\n\nconst toISO = Date.prototype.toISOString\n\nconst defaultFormat = _formats_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\nconst defaults = {\n  addQueryPrefix: false,\n  allowDots: false,\n  allowEmptyArrays: false,\n  arrayFormat: 'indices',\n  charset: 'utf-8',\n  charsetSentinel: false,\n  delimiter: '&',\n  encode: true,\n  encodeDotInKeys: false,\n  encoder: _utils_js__WEBPACK_IMPORTED_MODULE_1__.encode,\n  encodeValuesOnly: false,\n  format: defaultFormat,\n  formatter: _formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters[defaultFormat],\n  // deprecated\n  indices: false,\n  serializeDate: function serializeDate(date) {\n    return toISO.call(date)\n  },\n  skipNulls: false,\n  strictNullHandling: false,\n}\n\nconst isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n  return (\n    typeof v === 'string' ||\n    typeof v === 'number' ||\n    typeof v === 'boolean' ||\n    typeof v === 'symbol' ||\n    typeof v === 'bigint'\n  )\n}\n\nconst sentinel = {}\n\nconst _stringify = function stringify(\n  object,\n  prefix,\n  generateArrayPrefix,\n  commaRoundTrip,\n  allowEmptyArrays,\n  strictNullHandling,\n  skipNulls,\n  encodeDotInKeys,\n  encoder,\n  filter,\n  sort,\n  allowDots,\n  serializeDate,\n  format,\n  formatter,\n  encodeValuesOnly,\n  charset,\n  sideChannel,\n) {\n  let obj = object\n\n  let tmpSc = sideChannel\n  let step = 0\n  let findFlag = false\n  while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n    // Where object last appeared in the ref tree\n    const pos = tmpSc.get(object)\n    step += 1\n    if (typeof pos !== 'undefined') {\n      if (pos === step) {\n        throw new RangeError('Cyclic object value')\n      } else {\n        findFlag = true // Break while\n      }\n    }\n    if (typeof tmpSc.get(sentinel) === 'undefined') {\n      step = 0\n    }\n  }\n\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj)\n  } else if (obj instanceof Date) {\n    obj = serializeDate(obj)\n  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    obj = _utils_js__WEBPACK_IMPORTED_MODULE_1__.maybeMap(obj, function (value) {\n      if (value instanceof Date) {\n        return serializeDate(value)\n      }\n      return value\n    })\n  }\n\n  if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly\n        ? encoder(prefix, defaults.encoder, charset, 'key', format)\n        : prefix\n    }\n\n    obj = ''\n  }\n\n  if (isNonNullishPrimitive(obj) || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBuffer(obj)) {\n    if (encoder) {\n      const keyValue = encodeValuesOnly\n        ? prefix\n        : encoder(prefix, defaults.encoder, charset, 'key', format)\n      return [\n        formatter(keyValue) +\n          '=' +\n          formatter(encoder(obj, defaults.encoder, charset, 'value', format)),\n      ]\n    }\n    return [formatter(prefix) + '=' + formatter(String(obj))]\n  }\n\n  const values = []\n\n  if (typeof obj === 'undefined') {\n    return values\n  }\n\n  let objKeys\n  if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    // we need to join elements in\n    if (encodeValuesOnly && encoder) {\n      obj = _utils_js__WEBPACK_IMPORTED_MODULE_1__.maybeMap(obj, encoder)\n    }\n    objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }]\n  } else if (isArray(filter)) {\n    objKeys = filter\n  } else {\n    const keys = Object.keys(obj)\n    objKeys = sort ? keys.sort(sort) : keys\n  }\n\n  const encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix\n\n  const adjustedPrefix =\n    commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix\n\n  if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n    return adjustedPrefix + '[]'\n  }\n\n  for (let j = 0; j < objKeys.length; ++j) {\n    const key = objKeys[j]\n    const value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key]\n\n    if (skipNulls && value === null) {\n      continue\n    }\n\n    const encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key\n    const keyPrefix = isArray(obj)\n      ? typeof generateArrayPrefix === 'function'\n        ? generateArrayPrefix(adjustedPrefix, encodedKey)\n        : adjustedPrefix\n      : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']')\n\n    sideChannel.set(object, step)\n    const valueSideChannel = new WeakMap()\n    valueSideChannel.set(sentinel, sideChannel)\n    pushToArray(\n      values,\n      _stringify(\n        value,\n        keyPrefix,\n        generateArrayPrefix,\n        commaRoundTrip,\n        allowEmptyArrays,\n        strictNullHandling,\n        skipNulls,\n        encodeDotInKeys,\n        generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n        filter,\n        sort,\n        allowDots,\n        serializeDate,\n        format,\n        formatter,\n        encodeValuesOnly,\n        charset,\n        valueSideChannel,\n      ),\n    )\n  }\n\n  return values\n}\n\nconst normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n  if (!opts) {\n    return defaults\n  }\n\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided')\n  }\n\n  if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n    throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided')\n  }\n\n  if (\n    opts.encoder !== null &&\n    typeof opts.encoder !== 'undefined' &&\n    typeof opts.encoder !== 'function'\n  ) {\n    throw new TypeError('Encoder has to be a function.')\n  }\n\n  const charset = opts.charset || defaults.charset\n  if (\n    typeof opts.charset !== 'undefined' &&\n    opts.charset !== 'utf-8' &&\n    opts.charset !== 'iso-8859-1'\n  ) {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined')\n  }\n\n  let format = _formats_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  if (typeof opts.format !== 'undefined') {\n    if (!has.call(_formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters, opts.format)) {\n      throw new TypeError('Unknown format option provided.')\n    }\n    format = opts.format\n  }\n  const formatter = _formats_js__WEBPACK_IMPORTED_MODULE_0__.formatters[format]\n\n  let filter = defaults.filter\n  if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n    filter = opts.filter\n  }\n\n  let arrayFormat\n  if (opts.arrayFormat in arrayPrefixGenerators) {\n    arrayFormat = opts.arrayFormat\n  } else if ('indices' in opts) {\n    arrayFormat = opts.indices ? 'indices' : 'repeat'\n  } else {\n    arrayFormat = defaults.arrayFormat\n  }\n\n  if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n    throw new TypeError('`commaRoundTrip` must be a boolean, or absent')\n  }\n\n  const allowDots =\n    typeof opts.allowDots === 'undefined'\n      ? opts.encodeDotInKeys === true\n        ? true\n        : defaults.allowDots\n      : !!opts.allowDots\n\n  return {\n    addQueryPrefix:\n      typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n    allowDots: allowDots,\n    allowEmptyArrays:\n      typeof opts.allowEmptyArrays === 'boolean'\n        ? !!opts.allowEmptyArrays\n        : defaults.allowEmptyArrays,\n    arrayFormat: arrayFormat,\n    charset: charset,\n    charsetSentinel:\n      typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    commaRoundTrip: opts.commaRoundTrip,\n    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n    encodeDotInKeys:\n      typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n    encodeValuesOnly:\n      typeof opts.encodeValuesOnly === 'boolean'\n        ? opts.encodeValuesOnly\n        : defaults.encodeValuesOnly,\n    filter: filter,\n    format: format,\n    formatter: formatter,\n    serializeDate:\n      typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n    sort: typeof opts.sort === 'function' ? opts.sort : null,\n    strictNullHandling:\n      typeof opts.strictNullHandling === 'boolean'\n        ? opts.strictNullHandling\n        : defaults.strictNullHandling,\n  }\n}\n\nfunction stringify(object, opts) {\n  let obj = object\n  const options = normalizeStringifyOptions(opts)\n\n  let objKeys\n  let filter\n\n  if (typeof options.filter === 'function') {\n    filter = options.filter\n    obj = filter('', obj)\n  } else if (isArray(options.filter)) {\n    filter = options.filter\n    objKeys = filter\n  }\n\n  const keys = []\n\n  if (typeof obj !== 'object' || obj === null) {\n    return ''\n  }\n\n  const generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat]\n  const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip\n\n  if (!objKeys) {\n    objKeys = Object.keys(obj)\n  }\n\n  if (options.sort) {\n    objKeys.sort(options.sort)\n  }\n\n  const sideChannel = new WeakMap()\n  for (let i = 0; i < objKeys.length; ++i) {\n    const key = objKeys[i]\n\n    if (options.skipNulls && obj[key] === null) {\n      continue\n    }\n    pushToArray(\n      keys,\n      _stringify(\n        obj[key],\n        key,\n        generateArrayPrefix,\n        commaRoundTrip,\n        options.allowEmptyArrays,\n        options.strictNullHandling,\n        options.skipNulls,\n        options.encodeDotInKeys,\n        options.encode ? options.encoder : null,\n        options.filter,\n        options.sort,\n        options.allowDots,\n        options.serializeDate,\n        options.format,\n        options.formatter,\n        options.encodeValuesOnly,\n        options.charset,\n        sideChannel,\n      ),\n    )\n  }\n\n  const joined = keys.join(options.delimiter)\n  let prefix = options.addQueryPrefix === true ? '?' : ''\n\n  if (options.charsetSentinel) {\n    if (options.charset === 'iso-8859-1') {\n      // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n      prefix += 'utf8=%26%2310003%3B&'\n    } else {\n      // encodeURIComponent('✓')\n      prefix += 'utf8=%E2%9C%93&'\n    }\n  }\n\n  return joined.length > 0 ? prefix + joined : ''\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs-esm/lib/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/qs-esm/lib/utils.js":
/*!******************************************!*\
  !*** ./node_modules/qs-esm/lib/utils.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToObject: () => (/* binding */ arrayToObject),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   maybeMap: () => (/* binding */ maybeMap),\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _formats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.js */ \"(rsc)/./node_modules/qs-esm/lib/formats.js\");\n\n\n;\n\nconst has = Object.prototype.hasOwnProperty\nconst isArray = Array.isArray\n\nconst hexTable = (function () {\n  const array = []\n  for (let i = 0; i < 256; ++i) {\n    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase())\n  }\n\n  return array\n})()\n\nconst compactQueue = function compactQueue(queue) {\n  while (queue.length > 1) {\n    const item = queue.pop()\n    const obj = item.obj[item.prop]\n\n    if (isArray(obj)) {\n      const compacted = []\n\n      for (let j = 0; j < obj.length; ++j) {\n        if (typeof obj[j] !== 'undefined') {\n          compacted.push(obj[j])\n        }\n      }\n\n      item.obj[item.prop] = compacted\n    }\n  }\n}\n\nconst arrayToObject = function arrayToObject(source, options) {\n  const obj = options && options.plainObjects ? Object.create(null) : {}\n  for (let i = 0; i < source.length; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i]\n    }\n  }\n\n  return obj\n}\n\nconst merge = function merge(target, source, options) {\n  /* eslint no-param-reassign: 0 */\n  if (!source) {\n    return target\n  }\n\n  if (typeof source !== 'object') {\n    if (isArray(target)) {\n      target.push(source)\n    } else if (target && typeof target === 'object') {\n      if (\n        (options && (options.plainObjects || options.allowPrototypes)) ||\n        !has.call(Object.prototype, source)\n      ) {\n        target[source] = true\n      }\n    } else {\n      return [target, source]\n    }\n\n    return target\n  }\n\n  if (!target || typeof target !== 'object') {\n    return [target].concat(source)\n  }\n\n  let mergeTarget = target\n  if (isArray(target) && !isArray(source)) {\n    mergeTarget = arrayToObject(target, options)\n  }\n\n  if (isArray(target) && isArray(source)) {\n    source.forEach(function (item, i) {\n      if (has.call(target, i)) {\n        const targetItem = target[i]\n        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n          target[i] = merge(targetItem, item, options)\n        } else {\n          target.push(item)\n        }\n      } else {\n        target[i] = item\n      }\n    })\n    return target\n  }\n\n  return Object.keys(source).reduce(function (acc, key) {\n    const value = source[key]\n\n    if (has.call(acc, key)) {\n      acc[key] = merge(acc[key], value, options)\n    } else {\n      acc[key] = value\n    }\n    return acc\n  }, mergeTarget)\n}\n\nconst assign = function assignSingleSource(target, source) {\n  return Object.keys(source).reduce(function (acc, key) {\n    acc[key] = source[key]\n    return acc\n  }, target)\n}\n\nconst decode = function (str, decoder, charset) {\n  const strWithoutPlus = str.replace(/\\+/g, ' ')\n  if (charset === 'iso-8859-1') {\n    // unescape never throws, no try...catch needed:\n    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape)\n  }\n  // utf-8\n  try {\n    return decodeURIComponent(strWithoutPlus)\n  } catch (e) {\n    return strWithoutPlus\n  }\n}\n\nconst limit = 1024\n\nconst encode = function encode(str, defaultEncoder, charset, kind, format) {\n  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n  // It has been adapted here for stricter adherence to RFC 3986\n  if (str.length === 0) {\n    return str\n  }\n\n  let string = str\n  if (typeof str === 'symbol') {\n    string = Symbol.prototype.toString.call(str)\n  } else if (typeof str !== 'string') {\n    string = String(str)\n  }\n\n  if (charset === 'iso-8859-1') {\n    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n      return '%26%23' + parseInt($0.slice(2), 16) + '%3B'\n    })\n  }\n\n  let out = ''\n  for (let j = 0; j < string.length; j += limit) {\n    const segment = string.length >= limit ? string.slice(j, j + limit) : string\n    const arr = []\n\n    for (let i = 0; i < segment.length; ++i) {\n      let c = segment.charCodeAt(i)\n      if (\n        c === 0x2d || // -\n        c === 0x2e || // .\n        c === 0x5f || // _\n        c === 0x7e || // ~\n        (c >= 0x30 && c <= 0x39) || // 0-9\n        (c >= 0x41 && c <= 0x5a) || // a-z\n        (c >= 0x61 && c <= 0x7a) || // A-Z\n        (format === _formats_js__WEBPACK_IMPORTED_MODULE_0__.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n      ) {\n        arr[arr.length] = segment.charAt(i)\n        continue\n      }\n\n      if (c < 0x80) {\n        arr[arr.length] = hexTable[c]\n        continue\n      }\n\n      if (c < 0x800) {\n        arr[arr.length] = hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)]\n        continue\n      }\n\n      if (c < 0xd800 || c >= 0xe000) {\n        arr[arr.length] =\n          hexTable[0xe0 | (c >> 12)] +\n          hexTable[0x80 | ((c >> 6) & 0x3f)] +\n          hexTable[0x80 | (c & 0x3f)]\n        continue\n      }\n\n      i += 1\n      c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff))\n\n      arr[arr.length] =\n        hexTable[0xf0 | (c >> 18)] +\n        hexTable[0x80 | ((c >> 12) & 0x3f)] +\n        hexTable[0x80 | ((c >> 6) & 0x3f)] +\n        hexTable[0x80 | (c & 0x3f)]\n    }\n\n    out += arr.join('')\n  }\n\n  return out\n}\n\nconst compact = function compact(value) {\n  const queue = [{ obj: { o: value }, prop: 'o' }]\n  const refs = []\n\n  for (let i = 0; i < queue.length; ++i) {\n    const item = queue[i]\n    const obj = item.obj[item.prop]\n\n    const keys = Object.keys(obj)\n    for (let j = 0; j < keys.length; ++j) {\n      const key = keys[j]\n      const val = obj[key]\n      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n        queue.push({ obj: obj, prop: key })\n        refs.push(val)\n      }\n    }\n  }\n\n  compactQueue(queue)\n\n  return value\n}\n\nconst isRegExp = function isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]'\n}\n\nconst isBuffer = function isBuffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false\n  }\n\n  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj))\n}\n\nconst combine = function combine(a, b) {\n  return [].concat(a, b)\n}\n\nconst maybeMap = function maybeMap(val, fn) {\n  if (isArray(val)) {\n    const mapped = []\n    for (let i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]))\n    }\n    return mapped\n  }\n  return fn(val)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/qs-esm/lib/utils.js\n");

/***/ })

};
;